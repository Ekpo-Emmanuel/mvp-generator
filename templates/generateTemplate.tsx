import { ProjectConfig } from "@/types/project";

export const generateTemplate = (config: ProjectConfig): Map<string, string> => {
  const files = new Map<string, string>();

  // Generate `package.json`
  files.set(
    "package.json",
    JSON.stringify(
      {
        name: config.framework || "my-nextjs-app",
        private: true,
        version: "0.0.1",
        scripts: {
          dev: "next dev",
          build: "next build",
          start: "next start",
        },
        dependencies: {
          react: "^18.2.0",
          "react-dom": "^18.2.0",
          next: "^13.4.0", // Ensure the version supports App Router
          ...(config.authentication?.includes("Clerk") && { "@clerk/nextjs": "^4.6.0" }),
          ...(config.database === "Xata" && { "@xata.io/client": "^2.0.0" }),
        },
        devDependencies: {
          tailwindcss: "^3.3.2",
          autoprefixer: "^10.4.14",
          postcss: "^8.4.21",
          typescript: "^5.0.2",
        },
      },
      null,
      2
    )
  );
 
  // Generate tsconfig.json
  files.set(
    "tsconfig.json",
    `
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
`
  );

  // Tailwind CSS configuration
  if (config.styling === "Tailwind CSS") {
    files.set(
      "tailwind.config.js",
      `
        import type { Config } from "tailwindcss";

        export default {
        content: [
            "./pages/**/*.{js,ts,jsx,tsx,mdx}",
            "./components/**/*.{js,ts,jsx,tsx,mdx}",
            "./app/**/*.{js,ts,jsx,tsx,mdx}",
        ],
        theme: {
            extend: {
            colors: {
                background: "var(--background)",
                foreground: "var(--foreground)",
            },
            },
        },
        plugins: [],
        } satisfies Config;
      `
    );

    files.set(
      "app/globals.css",
      `
        @tailwind base;
        @tailwind components;
        @tailwind utilities;

        :root {
        --background: #ffffff;
        --foreground: #171717;
        }

        @media (prefers-color-scheme: dark) {
            :root {
                --background: #0a0a0a;
                --foreground: #ededed;
            }
        }

        body {
            color: var(--foreground);
            background: var(--background);
            font-family: Arial, Helvetica, sans-serif;
        }
      `
    );
  }

  // Add Next.js App Router structure
  files.set(
    "app/layout.tsx",
    `   import './globals.css';
        import { Inter } from 'next/font/google';
        ${config.authentication?.includes("Clerk") ? "import { ClerkProvider } from '@clerk/nextjs';" : ""}

        const inter = Inter({ subsets: ['latin'] });

        export const metadata = {
            title: '${config.framework || "nextjs-app"}',
            description: 'Generated by Next.js',
        };

        export default function RootLayout({
            children,
            }: {
            children: React.ReactNode;
        }) {
            return (
                <html lang="en">
                    <body className={inter.className}>
                        ${config.authentication?.includes("Clerk") ? "<ClerkProvider>{children}</ClerkProvider>" : "{children}"}
                    </body>
                </html>
            );
        }`
  );

  files.set(
    "app/page.tsx",
    `
    ${config.authentication?.includes("Clerk") && (`
        import Link from "next/link";
        import { SignInButton, SignedIn, SignedOut, UserButton } from "@clerk/nextjs";
    `)}
    export default function Home() {
        return (
            <main className="flex min-h-screen flex-col items-center justify-center p-24">
            <h1 className="text-4xl font-bold">Welcome to Your Next.js App</h1>
            <p className="mt-4 text-lg text-gray-600">Start building something amazing!</p>
            ${config.authentication?.includes("Clerk") && (`
                <div className="flex items-center gap-4">
                    <SignedOut>
                        <button>
                            <SignInButton />
                        </button>
                        <button>
                            <Link href="/sign-up">Get Started</Link>
                        </button>
                    </SignedOut>

                    <SignedIn>
                        <UserButton />
                        <button>
                            <Link href="/dashboard">Enter Dashboard</Link>
                        </button>
                    </SignedIn>
                </div>
            </div>
                `)}
            </main>
        );
    }`
  );

  // middleware
  if(config.authentication?.includes("Clerk")) {
    files.set(
    "middleware.ts",
    `
        import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";

        const isPublicRoute = createRouteMatcher([
            '/',
            '/sign-in(.*)', 
            '/sign-up(.*)',
            '/dashboard/(.*)'
        ])

        export default clerkMiddleware(async (auth, req) => {
            if (!isPublicRoute(req)) {
                await auth.protect()
            }
        })
        
        
        export const config = {
        matcher: [
            // Skip Next.js internals and all static files, unless found in search params
            '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
            // Always run for API routes
            '/(api|trpc)(.*)',
        ],
        };
    `
    );
  }

  //Auth screens
  if(config.authentication?.includes("Clerk")) {
    files.set(
        "app/(auth)/sign-in/[[...sign-in]]/page.tsx",
        `
            import { SignIn } from "@clerk/nextjs";

            export default function Page() {
            return (
                <>
                <div className="flex justify-center">
                    <SignIn />
                </div>
                </>
            );
            }
        `
    )
  }
  if(config.authentication?.includes("Clerk")) {
    files.set(
        "app/(auth)/sign-up/[[...sign-up]]/page.tsx",
        `
            import { SignUp } from "@clerk/nextjs";
            
            export default function Page() {
            return (
                <>
                <div className="flex justify-center">
                    <SignUp />
                </div>
                </>
            );
            }
        `
    )
  }

  if(config.authentication?.includes("Clerk")) {
    files.set(
    "app/dashboard/page.tsx",
    `
        import { auth } from "@clerk/nextjs/server";

        export default async function Page() {
            const { userId, orgId } = await auth();
            if (!userId) return null;

            return (
                <div>Welcome to dashboard page</div>
            );
        }


    `)
    }


  // Add API route example
  files.set(
    "app/api/hello/route.ts",
    `import { NextResponse } from 'next/server';

export async function GET() {
  return NextResponse.json({ message: 'Hello from the API!' });
}`
  );

  // Add .env.local file for environment variables
  files.set(
    ".env.local",
    `# Environment Variables

    # API Key
    API_KEY=your_api_key_here

    # Database URL
    DATABASE_URL=your_database_url_here

    # Clerk API Key (if using Clerk for authentication)
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=
    CLERK_SECRET_KEY=
    NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
    NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
    NEXT_PUBLIC_CLERK_SIGN_IN_FORCE_REDIRECT_URL=/dashboard
    NEXT_PUBLIC_CLERK_SIGN_UP_FORCE_REDIRECT_URL=/dashboard
    `
  );

  return files;
};
